type Book @model(subscriptions: null)
  @auth(
    rules: [
      # allow admins to create, update and delete books
      { allow: groups, groups: ["Admin"] }
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow all guest users (not authenticated) to view books
      { allow: public, operations: [read] }
    ]
  ) {
  id: ID!
  title: String!
  description: String
  image: String
  author: String
  featured: Boolean
  price: Float
  pdf: String
  orders: [BookOrder] @connection(keyName: "byBook", fields: ["id"])
}

type BookOrder @model(subscriptions: null)
  @key(name: "byBook", fields: ["book_id", "order_id"])
  @key(name: "byOrder", fields: ["order_id", "book_id"])
  @auth(
    rules:  [
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  book_id: ID!
  order_id: ID!
  quantity: Int!
  customer: String!
  book: Book @connection(fields: ["book_id"])
  order: Order @connection(fields: ["order_id"])
}

type Order @model(subscriptions: null)
  @auth(
    rules: [
      # allow all authenticated users to view books
      { allow: private, operations: [read] }
      # allow admins to view orders
      { allow: groups, groups: ["Admin"] }
    ]
  )
  @key(name: "byUser", fields: ["user"]) {
  id: ID!
  user: String!
  date: String
  total: Float
  books: [BookOrder] @connection(keyName: "byOrder", fields: ["id"])
}

type Cart @model(subscriptions: null)
  @auth(
    rules: [
      # only owner can see his cart
      { allow: owner, ownerField: "customer" },
      # allow admins to view cart
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  user: String!
  items: [CartItem] @connection(keyName: "byCart", fields: ["id"])
}

type CartItem @model(subscriptions: null)
  @key(name: "byBook", fields: ["bookID", "cartID"])
  @key(name: "byCart", fields: ["cartID", "bookID"])
  @auth(
    rules: [
      { allow: owner, ownerField: "cart" }
      { allow: groups, groups: ["Admin"] }
    ]
  ) {
  id: ID!
  cart: Cart @connection(fields: ["cartID"])
  cartID: ID!
  book: Book @connection(fields: ["bookID"])
  bookID: ID!
  quantity: Int
}

enum OrderStatus {
  SUCCESS
  FAILED
}

input CartItemInput {
  id: ID!
  title: String
  image: String
  price: Float
  quantity: Int,
  cartItemId: ID!
}

input ProcessOrderInput {
  id: ID!
  cartInput: [CartItemInput]
  total: Float!
  userId: ID!
}

type SubscriptionSession {
  url: String
  customer: String
}

type AllUserDetails {
  email: String!
  created: String
}

type AdminFunctionalities {
  allUsers: [AllUserDetails]
  subscribedUsers: [String]
  isAdmin: Boolean
}

type Mutation {
  processPayment(input: ProcessOrderInput!): String @function(name: "processPayment-${env}")
  processOrder(input: ProcessOrderInput!): OrderStatus @function(name: "createOrder-${env}")
  createSubscriptionPayment(input: String!): SubscriptionSession  @function(name: "createSubscriptionPayment-${env}")
  processSubscriptions(input: String): String @function(name: "processSubscriptions-${env}")
  adminFunctionalities: AdminFunctionalities @function(name: "adminFunctionalities-${env}")
}


